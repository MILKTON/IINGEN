CCS PCH C Compiler, Version 5.005, 10097               21-oct-16 16:22

               Filename:   C:\Users\Milton\MPLABXProjects\serialCases.X\build\default\production\main.lst

               ROM used:   348 bytes (1%)
                           Largest free fragment is 32416
               RAM used:   23 (1%) at main() level
                           28 (2%) worst case
               Stack used: 1 locations (0 in main + 1 for interrupts)
               Stack size: 31

*
0000:  GOTO   012A
*
0008:  MOVWF  04
000A:  MOVFF  FD8,05
000E:  MOVFF  FE0,06
0012:  MOVLB  0
0014:  MOVFF  FE9,0C
0018:  MOVFF  FEA,07
001C:  MOVFF  FE1,08
0020:  MOVFF  FE2,09
0024:  MOVFF  FD9,0A
0028:  MOVFF  FDA,0B
002C:  MOVFF  FF3,12
0030:  MOVFF  FF4,13
0034:  MOVFF  FFA,14
0038:  MOVFF  00,0E
003C:  MOVFF  01,0F
0040:  MOVFF  02,10
0044:  MOVFF  03,11
0048:  BTFSS  F9D.5
004A:  GOTO   0054
004E:  BTFSC  F9E.5
0050:  GOTO   00B4
0054:  MOVFF  0E,00
0058:  MOVFF  0F,01
005C:  MOVFF  10,02
0060:  MOVFF  11,03
0064:  MOVFF  0C,FE9
0068:  MOVFF  07,FEA
006C:  BSF    07.7
006E:  MOVFF  08,FE1
0072:  MOVFF  09,FE2
0076:  MOVFF  0A,FD9
007A:  MOVFF  0B,FDA
007E:  MOVFF  12,FF3
0082:  MOVFF  13,FF4
0086:  MOVFF  14,FFA
008A:  MOVF   04,W
008C:  MOVFF  06,FE0
0090:  MOVFF  05,FD8
0094:  RETFIE 0
.................... //author: sp 
.................... //date: 07/01/2006 
.................... //function: use PC to send 4 character to PIC and when the 4 character is detected as "ABCD" (ASCII), it echo back. 
.................... //             : the "ABCD" sequence have to be correct or it will not echo back to PC. 
....................  
.................... #include <18f2520.h> 
.................... //////// Standard Header file for the PIC18F2520 device //////////////// 
.................... #device PIC18F2520 
....................  
.................... #list 
....................  
.................... #fuses hs,nowdt,noprotect,noput 
.................... #use delay (clock=20M) 
....................  
....................  
.................... #use rs232(baud=9600,xmit=PIN_C6,rcv=PIN_C7, ERRORS) 
0096:  BTFSS  F9E.5
0098:  BRA    0096
009A:  MOVFF  FAB,16
009E:  MOVFF  FAE,01
00A2:  BTFSS  16.1
00A4:  BRA    00AA
00A6:  BCF    FAB.4
00A8:  BSF    FAB.4
00AA:  RETURN 0
00AC:  BTFSS  F9E.4
00AE:  BRA    00AC
00B0:  MOVWF  FAD
00B2:  RETURN 0
....................  
....................  
.................... #INT_RDA              //RS232 receive data available 
.................... void isr_rs232(){ 
....................    int A_char, B_char, C_char, D_char; 
....................    int protocol;  // use as a dummy to make sure the sequence of character received is correct. 
....................     
....................    output_low(PIN_C1);    
00B4:  BCF    F94.1
00B6:  BCF    F8B.1
....................    A_char = getc(); 
00B8:  RCALL  0096
00BA:  MOVFF  01,17
....................    if (A_char == 'A'){ 
00BE:  MOVF   17,W
00C0:  SUBLW  41
00C2:  BNZ   00C8
....................       protocol = 1; 
00C4:  MOVLW  01
00C6:  MOVWF  1B
....................    } 
....................    if (protocol == 1){ 
00C8:  DECFSZ 1B,W
00CA:  BRA    00DC
....................       B_char = getc(); 
00CC:  RCALL  0096
00CE:  MOVFF  01,18
....................       if (B_char == '3'){ 
00D2:  MOVF   18,W
00D4:  SUBLW  33
00D6:  BNZ   00DC
....................          protocol = 2; 
00D8:  MOVLW  02
00DA:  MOVWF  1B
....................       } 
....................    } 
....................    if (protocol == 2){ 
00DC:  MOVF   1B,W
00DE:  SUBLW  02
00E0:  BNZ   00F2
....................       C_char = getc(); 
00E2:  RCALL  0096
00E4:  MOVFF  01,19
....................       if (C_char == 'C'){ 
00E8:  MOVF   19,W
00EA:  SUBLW  43
00EC:  BNZ   00F2
....................          protocol = 3; 
00EE:  MOVLW  03
00F0:  MOVWF  1B
....................       } 
....................    } 
....................    if (protocol == 3){ 
00F2:  MOVF   1B,W
00F4:  SUBLW  03
00F6:  BNZ   0108
....................       D_char = getc(); 
00F8:  RCALL  0096
00FA:  MOVFF  01,1A
....................       if (D_char == 'D'){ 
00FE:  MOVF   1A,W
0100:  SUBLW  44
0102:  BNZ   0108
....................          protocol = 4; 
0104:  MOVLW  04
0106:  MOVWF  1B
....................       } 
....................    } 
....................    if (protocol == 4){ 
0108:  MOVF   1B,W
010A:  SUBLW  04
010C:  BNZ   0122
....................              output_high(PIN_C1); 
010E:  BCF    F94.1
0110:  BSF    F8B.1
....................            putc(A_char); putc(B_char); putc(C_char); putc(D_char);    //echo back the character u send to your PIC 
0112:  MOVF   17,W
0114:  RCALL  00AC
0116:  MOVF   18,W
0118:  RCALL  00AC
011A:  MOVF   19,W
011C:  RCALL  00AC
011E:  MOVF   1A,W
0120:  RCALL  00AC
....................     } 
....................    protocol = 0; //clear the dummy for further use. 
0122:  CLRF   1B
0124:  BCF    F9E.5
0126:  GOTO   0054
.................... } 
....................  
.................... void main(){ 
012A:  CLRF   FF8
012C:  BCF    FD0.7
012E:  BSF    07.7
0130:  CLRF   16
0132:  BSF    FB8.3
0134:  MOVLW  08
0136:  MOVWF  FAF
0138:  MOVLW  02
013A:  MOVWF  FB0
013C:  MOVLW  A6
013E:  MOVWF  FAC
0140:  MOVLW  90
0142:  MOVWF  FAB
0144:  NOP   
0146:  NOP   
0148:  MOVF   FC1,W
014A:  ANDLW  C0
014C:  IORLW  0F
014E:  MOVWF  FC1
0150:  MOVLW  07
0152:  MOVWF  FB4
....................    setup_adc(ADC_OFF);            // Built-in A/D setup function  
0154:  BCF    FC2.0
....................    enable_interrupts(GLOBAL); 
0156:  MOVLW  C0
0158:  IORWF  FF2,F
....................    enable_interrupts(INT_RDA); 
015A:  BSF    F9D.5
....................    while(1){ 
....................            ;    //do nothing and wait for rs232 interrupt 
015C:  BRA    015C
....................     } 
.................... } 
015E:  SLEEP 

Configuration Fuses:
   Word  1: C200   HS FCMEN IESO
   Word  2: 1E1F   NOPUT BROWNOUT BORV21 NOWDT WDT32768
   Word  3: 8700   CCP2C1 PBADEN LPT1OSC MCLR
   Word  4: 0081   STVREN NOLVP NOXINST NODEBUG
   Word  5: C00F   NOPROTECT NOCPB NOCPD
   Word  6: E00F   NOWRT NOWRTC NOWRTB NOWRTD
   Word  7: 400F   NOEBTR NOEBTRB
